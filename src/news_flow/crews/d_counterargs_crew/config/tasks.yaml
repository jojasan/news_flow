research_counterarguments_task:
  description: >
    Identify and summarize supporting resources that can be used to invalidate the main argument of 
    the article. You will find resources that support the following counterargument:
    Counterargument: {counterargument}.
    Counterargument rationale: {counter_rationale}.
    The following is the main article you will be working with:
    Article title: {news_title}.
    Original article URL: {source}.
    Perspective: {perspective}. You need to find resources that contrast with this perspective.
    You never include the original article source as supporting evidence. Original source: {source}.
    Evidence should be from reputable sources.
    You should try to include information from at least 3 supporting resources. If not possible,
    include as many as you can find. Include summaries of the sources you found. 
  expected_output: >
    Detailed excerpts of supporing resources found that support the provided counterargument help invalidate the key 
    idea from the article. Include quotes, statistics, and other relevant information.
    Try to return 3 or more supporting resources. If not possible, include as many as you can find.
    You will return a the result as a CounterArgumentSources pydantic model. Here's the definition of the pydantic
    model for your reference: ```
    class CounterArgSource(BaseModel):
      counter_argument: str = Field(..., description="The counter argument that opposes the main argument.")
      rationale: str = Field(..., description="The rationale for why this is a counter argument that opposes the main argument.")
      source_url: str = Field(..., description="The url source for the counter argument.")
      summary: str = Field(..., description="A summary of the counter argument article content")

    class CounterArgumentSources(BaseModel):
      news_title: str = Field(..., description="The full name of the originally provided news article.")
      counter_argument: CounterArgument = Field(..., description="The provided counter argument extracted from the news.")
      supporting_sources: List[CounterArgSource] = Field(..., description="A list of sources that provide evidence for the counter argument. List items are of type 'CounterArgSource'")```

    It is extremely important for you to remember that CounterArgumentSources.supporting_sources is a list of elements of type "CounterArgSource".
    Your result should be structured like this:
    {
      "news_title": "...",
      "counter_argument": {
        "argument": "...",
        "rationale": "..."
      },
      "supporting_sources": [
        {
          "counter_argument": "...",
          "rationale": "...",
          "source_url": "...",
          "summary": "..."
        },
        ...
      ]
    }
  agent: web_research_analyst

research_counterarguments_task_2:
  description: >
    Identify and summarize supporting resources that can be used to invalidate the main argument of 
    the article. You will find resources that support the following counterargument:
    Counterargument: {counterargument}.
    Counterargument rationale: {counter_rationale}.
    The following is the main article you will be working with:
    Article title: {news_title}.
    Original article URL: {source}.
    Perspective: {perspective}. You need to find resources that contrast with this perspective.
    You never include the original article source as supporting evidence. Original source: {source}.
    Evidence should be from reputable sources.
    You should try to include information from at least 3 supporting resources. If not possible,
    include as many as you can find. Include summaries of the sources you found. 
  expected_output: >
    Detailed excerpts of supporing resources found that support the provided counterargument help invalidate the key 
    idea from the article. Include quotes, statistics, and other relevant information.
    Try to return 3 or more supporting resources. If not possible, include as many as you can find.
    You will return a the result as a CounterArgumentSources pydantic model. Here's the definition of the pydantic
    model for your reference: ```
    class CounterArgSource(BaseModel):
      counter_argument: str = Field(..., description="The counter argument that opposes the main argument.")
      rationale: str = Field(..., description="The rationale for why this is a counter argument that opposes the main argument.")
      source_url: str = Field(..., description="The url source for the counter argument.")
      summary: str = Field(..., description="A summary of the counter argument article content")

    class CounterArgumentSources(BaseModel):
      news_title: str = Field(..., description="The full name of the originally provided news article.")
      counter_argument: CounterArgument = Field(..., description="The provided counter argument extracted from the news.")
      supporting_sources: List[CounterArgSource] = Field(..., description="A list of sources that provide evidence for the counter argument. List items are of type 'CounterArgSource'")```

    It is extremely important for you to remember that CounterArgumentSources.supporting_sources is a list of elements of type "CounterArgSource".
    Your result should be structured like this:
    {
      "news_title": "...",
      "counter_argument": {
        "argument": "...",
        "rationale": "..."
      },
      "supporting_sources": [
        {
          "counter_argument": "...",
          "rationale": "...",
          "source_url": "...",
          "summary": "..."
        },
        ...
      ]
    }
  agent: web_research_analyst_2

consolidate_counterarg_resources_task:
  description: >
    Consolidate the counterargument supporting resources found by the research team for the following original article:
    Article title: {news_title}.
    Article URL: {source}.
    Counterargument: {counterargument}.
    Counterargument rationale: {counter_rationale}.
    Perspective: {perspective}. The resources must contrast with this perspective.
    If the data provided by the Analysts is not enough to invalidate the main point of the article, you may need 
    conduct research for more information. 
  expected_output: >
    A list of supporting resources found by the research team.
    Do not include the original article as a supporting resource, and do not provide a summary of the original article. 
    You will return a the result as a CounterArgumentSources pydantic model. Here's the definition of the pydantic
    model for your reference: ```
    class CounterArgSource(BaseModel):
      counter_argument: str = Field(..., description="The counter argument that opposes the main argument.")
      rationale: str = Field(..., description="The rationale for why this is a counter argument that opposes the main argument.")
      source_url: str = Field(..., description="The url source for the counter argument.")
      summary: str = Field(..., description="A summary of the counter argument article content")

    class CounterArgumentSources(BaseModel):
      news_title: str = Field(..., description="The full name of the originally provided news article.")
      counter_argument: CounterArgument = Field(..., description="The provided counter argument extracted from the news.")
      supporting_sources: List[CounterArgSource] = Field(..., description="A list of sources that provide evidence for the counter argument. List items are of type 'CounterArgSource'")```

    It is extremely important for you to remember that CounterArgumentSources.supporting_sources is a list of elements of type "CounterArgSource".
    Your result should be structured like this:
    {
      "news_title": "...",
      "counter_argument": {
        "argument": "...",
        "rationale": "..."
      },
      "supporting_sources": [
        {
          "counter_argument": "...",
          "rationale": "...",
          "source_url": "...",
          "summary": "..."
        },
        ...
      ]
    }
  agent: research_lead